*** Begin Patch
*** Add File: routes/dashboard_routes.py
+from datetime import datetime, date
+from fastapi import APIRouter, Depends
+from sqlalchemy.orm import Session
+from sqlalchemy import func, distinct
+from db import get_db
+from models_magnet import MagnetLink
+
+router = APIRouter()
+
+@router.get("/api/dashboard")
+def get_dashboard(db: Session = Depends(get_db)):
+    """
+    仪表盘真实聚合数据
+    """
+    # 总量
+    total_count = db.query(func.count(MagnetLink.id)).scalar() or 0
+
+    # 今日新增
+    today = date.today()
+    today_start = datetime.combine(today, datetime.min.time())
+    today_end = datetime.combine(today, datetime.max.time())
+    today_new = (
+        db.query(func.count(MagnetLink.id))
+        .filter(MagnetLink.created_at >= today_start, MagnetLink.created_at <= today_end)
+        .scalar()
+        or 0
+    )
+
+    # 去重命中（总量-去重后code数）
+    distinct_codes = db.query(func.count(distinct(MagnetLink.code))).scalar() or 0
+    deduplicated = max(total_count - distinct_codes, 0)
+
+    # 待补元数据（示例：缺少中文标题）
+    pending_fill = (
+        db.query(func.count(MagnetLink.id))
+        .filter((MagnetLink.title_cn == None) | (MagnetLink.title_cn == ""))  # noqa: E711
+        .scalar()
+        or 0
+    )
+
+    return {
+        "success": True,
+        "data": {
+            "today_new": today_new,
+            "total_count": total_count,
+            "deduplicated": deduplicated,
+            "failed_tasks": 0,
+            "pending_fill": pending_fill,
+        },
+    }
+
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: routes/magnet_routes.py
@@
-from fastapi import APIRouter, HTTPException, Depends
+from fastapi import APIRouter, HTTPException, Depends, Query
 from sqlalchemy.orm import Session
+from sqlalchemy import or_, desc
 from db import get_db
 from magnet_manager import get_magnet_manager
 from sehuatang_parser import parse_sehuatang_post
+from models_magnet import MagnetLink
@@
 router = APIRouter()
@@
 # 这里是你原有的多个路由（/api/magnets/{code}、/api/magnets/search/{keyword}、/api/magnets/recent 等）
 # 下面追加“分页列表”和“按番号详情（新版路径）”
+
+@router.get("/api/magnets")
+def list_magnets(
+    db: Session = Depends(get_db),
+    page: int = Query(1, ge=1),
+    page_size: int = Query(20, ge=1, le=200),
+    search: str | None = Query(None),
+    sort: str | None = Query("created_at"),
+    order: str | None = Query("desc"),
+):
+    """
+    分页查询磁链（支持 search: code/title/title_cn/studio/studio_cn 模糊）
+    返回格式：{success, data, total}
+    """
+    q = db.query(MagnetLink)
+    if search:
+        like = f"%{search.strip()}%"
+        q = q.filter(
+            or_(
+                MagnetLink.code.ilike(like),
+                MagnetLink.title.ilike(like),
+                MagnetLink.title_cn.ilike(like),
+                MagnetLink.studio.ilike(like),
+                MagnetLink.studio_cn.ilike(like),
+            )
+        )
+
+    sort_field = getattr(MagnetLink, sort or "created_at", MagnetLink.created_at)
+    q = q.order_by(desc(sort_field) if (order or "desc").lower() == "desc" else sort_field)
+
+    total = q.count()
+    rows = q.offset((page - 1) * page_size).limit(page_size).all()
+    data = [r.to_dict() for r in rows]
+    return {"success": True, "data": data, "total": total}
+
+
+@router.get("/api/magnets/by-code/{code}")
+def get_magnet_by_code_v2(code: str, db: Session = Depends(get_db)):
+    """
+    新路径：按番号获取详情，避免与“数字ID”混淆
+    """
+    row = db.query(MagnetLink).filter(MagnetLink.code == code).first()
+    if not row:
+        raise HTTPException(status_code=404, detail="未找到该番号")
+    return {"success": True, "data": row.to_dict()}
*** End Patch
diff
复制代码
*** Begin Patch
*** Add File: routes/proxies_routes.py
+import json
+from pathlib import Path
+from typing import List, Optional
+from fastapi import APIRouter, HTTPException
+from pydantic import BaseModel
+
+router = APIRouter()
+
+DATA_FILE = Path("data/proxies.json")
+DATA_FILE.parent.mkdir(parents=True, exist_ok=True)
+
+
+class ProxyItem(BaseModel):
+    id: str
+    name: str
+    proxy_url: str  # http/https/socks5://user:pass@host:port
+    enabled: bool = True
+    note: Optional[str] = None
+
+
+def _load_all() -> List[ProxyItem]:
+    if DATA_FILE.exists():
+        return [ProxyItem(**x) for x in json.loads(DATA_FILE.read_text("utf-8"))]
+    return []
+
+
+def _save_all(items: List[ProxyItem]) -> None:
+    DATA_FILE.write_text(
+        json.dumps([x.dict() for x in items], ensure_ascii=False, indent=2), "utf-8"
+    )
+
+
+@router.get("/api/proxies")
+def list_proxies():
+    return {"success": True, "data": [x.dict() for x in _load_all()]}
+
+
+@router.post("/api/proxies")
+def create_proxy(item: ProxyItem):
+    items = _load_all()
+    if any(x.id == item.id for x in items):
+        raise HTTPException(status_code=400, detail="ID 已存在")
+    items.append(item)
+    _save_all(items)
+    return {"success": True, "data": item.dict()}
+
+
+@router.put("/api/proxies/{pid}")
+def update_proxy(pid: str, item: ProxyItem):
+    items = _load_all()
+    for i, x in enumerate(items):
+        if x.id == pid:
+            items[i] = item
+            _save_all(items)
+            return {"success": True, "data": item.dict()}
+    raise HTTPException(status_code=404, detail="未找到该代理")
+
+
+@router.delete("/api/proxies/{pid}")
+def delete_proxy(pid: str):
+    items = _load_all()
+    n = len(items)
+    items = [x for x in items if x.id != pid]
+    if len(items) == n:
+        raise HTTPException(status_code=404, detail="未找到该代理")
+    _save_all(items)
+    return {"success": True, "data": True}
+
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: main.py
@@
-from routes.proxy_routes import router as proxy_router
+from routes.proxy_routes import router as proxy_router
+from routes.proxies_routes import router as proxies_router
+from routes.dashboard_routes import router as dashboard_router
@@
 app.include_router(magnet_router, tags=["磁力链接"])
 app.include_router(settings_router, tags=["系统设置"])
 app.include_router(proxy_router, tags=["代理管理"])
+app.include_router(proxies_router, tags=["代理管理"])
+app.include_router(dashboard_router, tags=["仪表盘"])
 # app.include_router(metadata_router, tags=["元数据"]) # 注释掉metadata_refresh路由
 app.include_router(crawler_router, tags=["爬虫管理"])
 app.include_router(jobs_router, tags=["任务调度"])
 app.include_router(logs_router, tags=["系统日志"])
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: frontend/src/api/client.ts
@@
-import axios from "axios";
-
-const baseURL = import.meta.env.VITE_API_BASE || "http://127.0.0.1:8000";
+import axios from "axios";
+// 生产默认 /api（Nginx/Vite 反代），开发用 .env.development 指定完整地址
+const baseURL = import.meta.env.VITE_API_BASE || "/api";
 export const apiClient = axios.create({
   baseURL,
   withCredentials: false,
   timeout: 15000,
 });
@@
-  r => r,
-  err => {
+  r => r,
+  err => {
     // 这里可以加全局错误提示
     console.error('API Error:', err);
     return Promise.reject(err);
   }
 );
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: frontend/src/api/dashboard.ts
@@
-import { apiClient } from './client';
-import { DashboardData } from '@/types';
-
-export const dashboardApi = {
-  // 获取仪表板数据
-  getDashboardData: async (): Promise<DashboardData> => {
-    const response = await apiClient.get('/dashboard');
-    return response.data;
-  },
-};
+import { apiClient } from './client';
+
+export interface DashboardData {
+  today_new: number;
+  total_count: number;
+  deduplicated: number;
+  failed_tasks: number;
+  pending_fill: number;
+}
+
+export const getDashboard = async (): Promise<DashboardData> => {
+  const response = await apiClient.get('/dashboard');
+  // 后端返回 {success, data:{...}}
+  return response.data.data as DashboardData;
+};
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: frontend/src/pages/Dashboard.tsx
@@
-import { useQuery } from '@tanstack/react-query';
+import { useQuery } from '@tanstack/react-query';
 import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
@@
-import { Link } from 'react-router-dom';
-
-// 模拟数据，实际应该从API获取
-const mockDashboardData = {
-  today_new: 156,
-  total_count: 12450,
-  dedup_hits: 23,
-  failed_tasks: 2,
-  pending_metadata: 45,
-};
+import { Link } from 'react-router-dom';
+import { getDashboard, DashboardData } from '@/api/dashboard';
@@
-const Dashboard = () => {
-  // 模拟API调用
-  const { data: dashboardData, isLoading, error } = useQuery({
-    queryKey: ['dashboard'],
-    queryFn: () => Promise.resolve(mockDashboardData),
-  });
+const Dashboard = () => {
+  // 真实 API
+  const { data: apiData, isLoading, error } = useQuery<DashboardData>({
+    queryKey: ['dashboard'],
+    queryFn: getDashboard,
+    staleTime: 10_000,
+  });
@@
-  const stats = [
+  // 将后端字段映射到现有UI命名（兼容旧文案）
+  const stats = [
     {
       title: "今日新增",
-      value: dashboardData?.today_new || 0,
+      value: apiData?.today_new ?? 0,
       icon: BarChart3,
       color: "text-blue-600",
       bgColor: "bg-blue-50",
     },
     {
       title: "总量",
-      value: dashboardData?.total_count || 0,
+      value: apiData?.total_count ?? 0,
       icon: FileText,
       color: "text-green-600",
       bgColor: "bg-green-50",
     },
     {
       title: "去重命中",
-      value: dashboardData?.dedup_hits || 0,
+      value: apiData?.deduplicated ?? 0,
       icon: Users,
       color: "text-purple-600",
       bgColor: "bg-purple-50",
     },
     {
       title: "失败任务",
-      value: dashboardData?.failed_tasks || 0,
+      value: apiData?.failed_tasks ?? 0,
       icon: AlertTriangle,
       color: "text-red-600",
       bgColor: "bg-red-50",
     },
     {
       title: "待补元数据",
-      value: dashboardData?.pending_metadata || 0,
+      value: apiData?.pending_fill ?? 0,
       icon: Clock,
       color: "text-orange-600",
       bgColor: "bg-orange-50",
     },
   ];
*** End Patch
diff
复制代码
*** Begin Patch
*** Update File: frontend/src/api/results.ts
@@
-import { apiClient } from './client';
+import { apiClient } from './client';
+
+export interface ResultListResp {
+  success: boolean;
+  data: any[];
+  total: number;
+}
+
+// 新增：分页 + 搜索列表（后端 /api/magnets）
+export const getResults = async (params: {
+  page: number;
+  page_size: number;
+  search?: string;
+  sort?: string;
+  order?: 'asc' | 'desc';
+}): Promise<ResultListResp> => {
+  const r = await apiClient.get('/magnets', { params });
+  return r.data as ResultListResp;
+};
+
+// 新增：按番号获取详情（后端 /api/magnets/by-code/{code}）
+export const getResultByCode = async (code: string) => {
+  const r = await apiClient.get(`/magnets/by-code/${code}`);
+  return r.data.data;
+};
*** End Patch
diff
复制代码
*** Begin Patch
*** Add File: frontend/.env.development
+VITE_API_BASE=http://127.0.0.1:8000/api
*** End Patch
diff
复制代码
*** Begin Patch
*** Add File: frontend/.env.production
+VITE_API_BASE=/api
*** End Patch